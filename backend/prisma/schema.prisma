generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  name     String

  @@map("users")
}

model Product {
  id          Int     @id @default(autoincrement())
  code        String
  ean         String?
  importer    String
  description String?

  galpaoQuantity        Int @default(0) @map("galpao_quantity")
  galpaoQuantityReserve Int @default(0) @map("galpao_quantity_reserve")
  lojaQuantity          Int @default(0) @map("loja_quantity")
  lojaQuantityReserve   Int @default(0) @map("loja_quantity_reserve")

  lojaLocation String?  @map("loja_location")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  isActive     Boolean  @default(true) @map("is_active")

  productsOnContainer ProductsOnContainer[]
  transactions        Transaction[]

  @@map("products")
}

model Container {
  id                  String                @id @unique
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  transactions        Transaction[]
  productsOnContainer ProductsOnContainer[]

  @@map("containers")
}

model ProductsOnContainer {
  id               Int       @id @default(autoincrement())
  containerId      String    @map("container_id")
  productId        Int       @map("product_id")
  quantityExpected Int       @default(0) @map("quantity_expected")
  quantityReceived Int       @default(0) @map("quantity_received")
  container        Container @relation(fields: [containerId], references: [id])
  product          Product   @relation(fields: [productId], references: [id])
  confirmed        Boolean   @default(true)
  inConference     Boolean   @default(false) @map("in_conference")
  observation      String?

  embarqueAt DateTime? @map("embarque_at")
  arrivalAt  DateTime? @map("arrival_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([containerId], map: "ProductsOnContainer_container_id_fkey")
  @@index([productId], map: "ProductsOnContainer_product_id_fkey")
  @@map("products_on_container")
}

model Transaction {
  id        Int     @id @default(autoincrement())
  type      String
  fromStock String? @map("from_stock")
  toStock   String? @map("to_stock")
  client    String?
  operator  String?

  entryAmount   Int? @default(0) @map("entry_amount")
  entryExpected Int? @default(0) @map("entry_expected")
  exitAmount    Int? @default(0) @map("exit_amount")

  observation String?
  partnerId   Int?    @map("partner_id")
  location    String?
  confirmed   Boolean @default(false) @map("confirmed")

  createdAt DateTime  @default(now()) @map("created_at")
  exitDate  DateTime? @map("exit_date")
  updatedAt DateTime  @updatedAt @map("updated_at")

  container   Container? @relation(fields: [containerId], references: [id])
  containerId String?    @map("container_id")
  product     Product    @relation(fields: [productId], references: [id])
  productId   Int        @map("product_id")

  @@index([productId], map: "Transactions_product_id_fkey")
  @@map("transactions")
}
