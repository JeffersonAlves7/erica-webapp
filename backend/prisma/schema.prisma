generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  name     String

  @@map("users")
}

model Product {
  id                  Int                   @id @default(autoincrement())
  code                String
  ean                 String?
  importer            Importer              
  description         String?
  galpaoQuantity      Int                   @default(0) @map("galpao_quantity")
  lojaQuantity        Int                   @default(0) @map("loja_quantity")
  lojaLocation        String?               @map("loja_location")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  productsOnContainer ProductsOnContainer[] 
  transactions        Transaction[]

  @@map("products")
}

enum Importer {
  ATTUS_BLOOM
  ATTUS
  ALPHA_YNFINITY
  
  @@map("importers")
}

model Container {
  id                  String                @id @unique
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  transactions        Transaction[]
  productsOnContainer ProductsOnContainer[]

  @@map("containers")
}

model ProductsOnContainer {
  id               Int       @id @default(autoincrement())
  containerId      String    @map("container_id")
  productId        Int       @map("product_id")
  quantityExpected Int      @map("quantity_expected")
  quantityReceived Int      @map("quantity_received")
  container        Container @relation(fields: [containerId], references: [id], map: "ProductsOnContainer_container_id_fkey")
  product          Product   @relation(fields: [productId], references: [id], map: "ProductsOnContainer_product_id_fkey")
  observation      String?
  createdAt        DateTime  @default(now()) @map("created_at")

  @@index([containerId], map: "ProductsOnContainer_container_id_fkey")
  @@index([productId], map: "ProductsOnContainer_product_id_fkey")
  @@map("products_on_container")
}

model Transaction {
  id               Int       @id @default(autoincrement())
  productId        Int       @map("product_id")
  type             TransactionType
  fromStock        Stock?    @map("from_stock")
  toStock          Stock?    @map("to_stock")
  client           String?
  operator         String?
  entryAmount      Int?      @default(0) @map("entry_amount")
  entryExpected    Int?      @default(0) @map("entry_expected")
  exitAmount       Int?      @default(0) @map("exit_amount")
  observation      String?
  location         String?
  confirmed        Boolean   @default(false) @map("checked")
  createdAt        DateTime  @default(now()) @map("created_at")
  containerId      String?   @map("container_id")
  container        Container? @relation(fields: [containerId], references: [id], map: "Transactions_container_id_fkey")
  product          Product   @relation(fields: [productId], references: [id], map: "Transactions_product_id_fkey")

  @@index([productId], map: "Transactions_product_id_fkey")
  @@map("transactions")
}

enum TransactionType {
  ENTRY
  EXIT
  RESERVE
  DEVOLUTION
  TRANSFERENCE

  @@map("transaction_types")
}

enum Stock {
  GALPAO
  LOJA

  @@map("stocks")
}